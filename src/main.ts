import { createApp } from 'vue'
import { createPinia } from 'pinia'
import App from './App.vue'
import router from './router'
import './styles/global.css'

// Importa o store de autentica√ß√£o
import { useAuthStore } from '@/store/useAuthStore'

/**
 * Inicializa a aplica√ß√£o de forma segura:
 * - Carrega a sess√£o do usu√°rio antes de montar
 * - Garante que o router esteja pronto
 * - Trata erros silenciosos
 */
async function initApp() {
  const app = createApp(App)
  const pinia = createPinia()

  // ‚úÖ Instala os plugins
  app.use(pinia)
  app.use(router)

  // Obt√©m o store de autentica√ß√£o
  const authStore = useAuthStore()

  // ‚úÖ Evita chamadas m√∫ltiplas
  if (!authStore.isLoaded) {
    try {
      console.log('üöÄ Iniciando carregamento da sess√£o do usu√°rio...')
      await authStore.loadUser()
      console.log('‚úÖ Sess√£o do usu√°rio carregada com sucesso')
    } catch (err) {
      console.error('‚ùå Falha ao inicializar a sess√£o do usu√°rio:', err)
      // N√£o interrompe a montagem ‚Äî apenas loga o erro
      // O usu√°rio ser√° redirecionado para login se n√£o estiver autenticado
    }
  }

  // Aguarda o router estar pronto antes de montar a app
  await router.isReady()
  app.mount('#app')

  // üì≤ Registrar Service Worker para Notifica√ß√µes Push (PWA)
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/sw.js')
      .then(reg => {
        console.log('‚úÖ [SOSJAC] Service Worker registrado com sucesso:', reg.scope);
      })
      .catch(err => {
        console.error('‚ùå [SOSJAC] Falha ao registrar Service Worker:', err);
      });
  }
}

// Inicia a aplica√ß√£o
initApp()